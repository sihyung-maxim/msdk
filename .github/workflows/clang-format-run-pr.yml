###############################################################################
#
# Copyright (C) 2022-2023 Maxim Integrated Products, Inc. (now owned by
# Analog Devices, Inc.),
# Copyright (C) 2023-2024 Analog Devices, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
##############################################################################

name: clang-format-run-pr

# Controls when the workflow will run
on:
  issue_comment:
      types: [created]

permissions:
  actions: write
  contents: write

env:
  CLANG_VERSION: 14

jobs:

  run-on-pr:
    permissions:
      contents: write
      pull-requests: write
      actions: write

    # Run on branches, not forked PR branches
    if: |
      contains(github.event.comment.body, '/clang-format-run')

    runs-on:
      - ubuntu-latest

    steps:

    - name: Install clang tools
      run: |
        sudo apt-get install clang-format-${CLANG_VERSION}

    - uses: actions/github-script@v7
      id: get-pr
      with:
        script: |
          const request = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          }

          core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)

          const acknowledge = {
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: 'rocket'
          }

          try {
            github.rest.reactions.createForIssueComment(acknowledge)
            const result = await github.rest.pulls.get(request)
            return result.data
          } catch (err) {
            core.setFailed(`Request failed with error ${err}`)
          }

    - uses: actions/checkout@v4
      with:
        repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
        ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
        fetch-depth: 0

    - name: clang-format-run
      run: |
          set +e
          # Don't return right away
          bash -e .github/workflows/clang-format-run.sh
          RETVAL=$?
          set -e

          if [[ $RETVAL -eq 0 ]]
          then
            exit 0
          fi

          # Files changed, not an error in this case
          if [[ $RETVAL -eq 1 ]]
          then
            exit 0
          fi

          # Unexpected error
          exit $RETVAL
          
    - name: Push reformatted files
      uses: EndBug/add-and-commit@v9.0.1
      with:
        add: '*'
        message: 'clang-format bot reformatting.'
        push: true
