copyright = """###############################################################################
 #
 # Copyright (C) 2024 Analog Devices, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #
 ##############################################################################"""

copyright_c = """/******************************************************************************
 *
 * Copyright (C) 2024 Analog Devices, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/"""

from subprocess import run
from pathlib import Path

if __name__ == "__main__":
    # 'git describe will print a string with info about the current commit's relationship
    # to the last tag.  '--tags' gets it working with non-annoted tags.
    command = "git describe --tags"
    result = run(command, shell=True, capture_output=True)
    if result.returncode != 0:
        print(f"Failed to run {command} with error {result.returncode}:\n{result.stderr.decode(encoding='utf-8')}")
        exit(result.returncode)
    
    version = result.stdout.decode(encoding="utf-8").strip()
    print(version)
    # Our tagging convention is v{version_year}_{version_month}
    # git describe will sometimes return something like v2024_02-5-g5f0770a64e
    version_year = int(version.split("_")[0][1:]) # Split the year and month based on the '_', and strip off the leading 'v'
    version_minor = version.split("_")[1].split("-")[0]
    version_month = int(version_minor[0]) if isinstance(version_minor, list) else int(version_minor)

    # Locate maxim_path relative to this file.
    maxim_path = Path(__file__).parent.parent.parent.parent

    # Place mxc_version.h in the root directory of the MSDK
    filename = "mxc_version"
    output_file = maxim_path / f"{filename}.h"
    with open(output_file, "w") as f:
        print(f"Writing to {output_file}")
        f.write(
f"""{copyright_c}
#ifndef MXC_VERSION_H_
#define MXC_VERSION_H_
// @autogenerated version info

/**
 * @brief The string representing the current MSDK version.
 * Format: `[Release tag]-[commits since release tag]-g[commit SHA]`
 * If exactly on a release tag, this string will match the tag
 */
#define MSDK_VERSION_STRING "{version}"
/**
 * @brief The month of the current MSDK version
 */
#define MSDK_VERSION_YEAR {version_year}
/**
 * @brief The year of the current MSDK version
 */
#define MSDK_VERSION_MONTH {version_month}

#endif // MXC_VERSION_H_
""")
        
    # Place msdk_version.mk next to the gcc/gcc_riscv.mk files.
    # This file will be used to print version info at build time.
    # Generating it is easier than trying to parse msdk_version.h with native Make functions
    output_file = maxim_path / f"Libraries/CMSIS/Device/Maxim/GCC/{filename}.mk"
    with open(output_file, "w") as f:
        print(f"Writing to {output_file}")
        f.write(
f"""{copyright}
# Autogenerated version info for build system.
MSDK_VERSION_STRING := {version}
MSDK_VERSION_YEAR := {version_year}
MSDK_VERSION_MONTH := {version_month}

# Add root MAXIM_PATH to IPATH so compiler can locate msdk_version.h
IPATH += $(MAXIM_PATH)
"""
        )